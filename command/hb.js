const fs = require('fs').promises;
const path = require('path');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn c√°c file JSON
const dataFilePath = path.join(__dirname, '../data/data.json');
const inventoryFilePath = path.join(__dirname, '../data/inv.json');
const huntbotFilePath = path.join(__dirname, '../data/huntbot.json');
const animalsFilePath = path.join(__dirname, '../data/animals.json');

// H√†m th·ª±c thi l·ªánh sƒÉn b·∫Øn
module.exports = {
    name: 'hb',
    execute: async (message, api) => {
        const uid = message.senderID;
        const args = message.body.split(' ');
        const minutes = parseInt(args[1], 10) || 0; // Th·ªùi gian sƒÉn b·∫Øn t·ª´ l·ªánh

        if (isNaN(minutes) || minutes <= 0 || minutes > 30) {
            api.sendMessage('‚õî Th·ªùi gian kh√¥ng h·ª£p l·ªá. Vui l√≤ng nh·∫≠p s·ªë ph√∫t t·ª´ 1 ƒë·∫øn 30.', message.threadID);
            return;
        }

        try {
            // ƒê·ªçc d·ªØ li·ªáu t·ª´ c√°c file JSON
            const [dataFile, inventoryFile, huntbotFile, animalsFile] = await Promise.all([
                fs.readFile(dataFilePath, 'utf8'),
                fs.readFile(inventoryFilePath, 'utf8'),
                fs.readFile(huntbotFilePath, 'utf8'),
                fs.readFile(animalsFilePath, 'utf8')
            ]);

            let data, inventory, huntbot, animals;
            try {
                data = JSON.parse(dataFile);
                inventory = JSON.parse(inventoryFile);
                huntbot = JSON.parse(huntbotFile);
                animals = JSON.parse(animalsFile);
            } catch (parseError) {
                console.error('L·ªói ph√¢n t√≠ch JSON:', parseError);
                api.sendMessage('üö® ƒê√£ x·∫£y ra l·ªói khi ph√¢n t√≠ch d·ªØ li·ªáu. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu v√† th·ª≠ l·∫°i sau.', message.threadID);
                return;
            }

            // T√¨m th√¥ng tin ng∆∞·ªùi d√πng trong data
            let user = data.find(user => user.senderID === uid);

            if (!user) {
                api.sendMessage('üö´ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa b·∫°n. H√£y s·ª≠ d·ª•ng l·ªánh !register ƒë·ªÉ th√™m v√†o h·ªá th·ªëng.', message.threadID);
                return;
            }

            // T√¨m ho·∫∑c t·∫°o th√¥ng tin ng∆∞·ªùi d√πng trong huntbot.json
            let userHuntbot = huntbot.find(user => user.uid === uid);

            if (!userHuntbot) {
                // Th√™m th√¥ng tin ng∆∞·ªùi d√πng m·ªõi v·ªõi gi√° tr·ªã m·∫∑c ƒë·ªãnh
                userHuntbot = {
                    uid: uid,
                    efficiency: {
                        level: 0,
                        value: 1,
                        upgradeCost: 0,
                        remainingEssence: 0
                    },
                    gain: {
                        level: 0,
                        value: 5,
                        upgradeCost: 0
                    },
                    duration: {
                        level: 0,
                        value: 30,
                        upgradeCost: 0
                    },
                    essence: 0
                };
                huntbot.push(userHuntbot);
                await fs.writeFile(huntbotFilePath, JSON.stringify(huntbot, null, 2));
            }

            // Ki·ªÉm tra th·ªùi gian ch·ªù v√† cooldown
            const now = Date.now();
            const cooldownTime = 15 * 60 * 1000; // 15 ph√∫t

            if (userHuntbot.lastHunt && now - userHuntbot.lastHunt < cooldownTime) {
                const remainingTime = Math.ceil((cooldownTime - (now - userHuntbot.lastHunt)) / 60000); // Th·ªùi gian c√≤n l·∫°i t√≠nh b·∫±ng ph√∫t
                api.sendMessage(`‚è≥ BOT C√íN ${remainingTime} PH√öT ƒê·ªÇ HO√ÄN TH√ÄNH.`, message.threadID);
                return;
            }

            // C·∫≠p nh·∫≠t th·ªùi gian b·∫Øt ƒë·∫ßu sƒÉn b·∫Øn
            userHuntbot.lastHunt = now;
            const totalMinutes = Math.min(minutes, userHuntbot.duration.value); // S·ªë ph√∫t t·ªëi ƒëa d·ª±a tr√™n duration
            const totalPets = totalMinutes * userHuntbot.efficiency.value;

            // G·ª≠i th√¥ng b√°o r·∫±ng sƒÉn b·∫Øn ƒëang ƒë∆∞·ª£c th·ª±c hi·ªán
            api.sendMessage(`üöÄ BOT ƒêANG SƒÇN ${totalPets} CON V√Ä T√çNH TO√ÅN ${totalMinutes} PH√öT.`, message.threadID);

            // Thi·∫øt l·∫≠p th·ªùi gian ch·ªù tr∆∞·ªõc khi g·ª≠i k·∫øt qu·∫£
            setTimeout(async () => {
                try {
                    let userInventory = inventory.find(item => item.senderID === uid);
                    
                    if (!userInventory) {
                        userInventory = { senderID: uid, items: {} };
                        inventory.push(userInventory);
                    }

                    // SƒÉn b·∫Øn v√† c·∫≠p nh·∫≠t kho
                    for (let i = 0; i < totalPets; i++) {
                        const randomAnimalIndex = Math.floor(Math.random() * animals.length);
                        const selectedAnimal = animals[randomAnimalIndex];
                        const animalName = selectedAnimal.name;

                        userInventory.items[animalName] = (userInventory.items[animalName] || 0) + 1;
                    }

                    // T√≠nh to√°n t·ªïng Essence
                    const totalEssence = totalMinutes * userHuntbot.gain.value;

                    // L∆∞u d·ªØ li·ªáu v√†o file
                    await Promise.all([
                        fs.writeFile(dataFilePath, JSON.stringify(data, null, 2)),
                        fs.writeFile(inventoryFilePath, JSON.stringify(inventory, null, 2)),
                        fs.writeFile(huntbotFilePath, JSON.stringify(huntbot, null, 2))
                    ]);

                    // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£ sƒÉn b·∫Øn
                    api.sendMessage(`üéØ B·∫°n ƒë√£ sƒÉn ƒë∆∞·ª£c ${totalPets} con trong ${totalMinutes} ph√∫t! B·∫°n nh·∫≠n ƒë∆∞·ª£c ${totalEssence} Essence.`, message.threadID);
                } catch (error) {
                    console.error('L·ªói khi th·ª±c hi·ªán sƒÉn b·∫Øn:', error);
                    api.sendMessage('üö® ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh sƒÉn b·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.', message.threadID);
                }
            }, totalMinutes * 60 * 1000); // Th·ªùi gian ch·ªù t√≠nh b·∫±ng mili gi√¢y
        } catch (error) {
            console.error('L·ªói khi th·ª±c thi l·ªánh sƒÉn b·∫Øn:', error);
            api.sendMessage('üö® ƒê√£ x·∫£y ra l·ªói khi th·ª±c hi·ªán l·ªánh sƒÉn b·∫Øn. Vui l√≤ng th·ª≠ l·∫°i sau.', message.threadID);
        }
    }
};
