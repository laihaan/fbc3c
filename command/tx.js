const fs = require('fs');
const path = require('path');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a d·ªØ li·ªáu ng∆∞·ªùi d√πng
const dataFilePath = path.join(__dirname, '../data/data.json');

// H√†m l·∫Øc x√≠ ng·∫ßu v√† tr·∫£ v·ªÅ k·∫øt qu·∫£
const rollDice = () => {
    return Math.floor(Math.random() * 6) + 1;
};

// H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn v·ªõi k√Ω hi·ªáu
const parseBetAmount = (amount) => {
    const match = amount.match(/^(\d+)([kmb])$/i);
    if (match) {
        const value = parseFloat(match[1]);
        switch (match[2].toLowerCase()) {
            case 'k': return value * 1000;
            case 'm': return value * 1000000;
            case 'b': return value * 1000000000;
        }
    }
    return parseFloat(amount);
};

// H√†m th·ª±c thi l·ªánh t√†i x·ªâu
module.exports = {
    name: 'tx',
    execute: async (message, api) => {
        const uid = message.senderID;
        const args = message.body.split(' ').slice(1); // L·∫•y c√°c tham s·ªë t·ª´ l·ªánh
        const cooldownTime = 30000; // Th·ªùi gian ch·ªù gi·ªØa c√°c l·ªánh (30 gi√¢y)
        const now = Date.now();

        // ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
        const data = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
        let user = data.find(user => user.senderID === uid);

        if (user) {
            // Ki·ªÉm tra th·ªùi gian ch·ªù
            if (user.lastTx && now - user.lastTx < cooldownTime) {
                return api.sendMessage('‚è≥ B·∫°n c·∫ßn ch·ªù th√™m 30 gi√¢y tr∆∞·ªõc khi ch∆°i tx l·∫ßn n·ªØa.', message.threadID);
            }

            // C·∫≠p nh·∫≠t th·ªùi gian ch∆°i
            user.lastTx = now;
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng l·ªánh
        if (args.length !== 2) {
            return api.sendMessage('üö´ L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng: !tx [t/x] [s·ªë ti·ªÅn/all].', message.threadID);
        }

        const betChoice = args[0].toLowerCase();
        let betAmount = args[1].toLowerCase() === 'all' ? user.money : parseBetAmount(args[1]);

        // Gi·ªõi h·∫°n s·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† 500,000
        if (betAmount > 500000) {
            betAmount = 500000;
        }

        // Ki·ªÉm tra l·ª±a ch·ªçn c∆∞·ª£c v√† s·ªë ti·ªÅn c∆∞·ª£c
        if (!['t', 'x'].includes(betChoice) || isNaN(betAmount) || betAmount <= 0) {
            return api.sendMessage('üö´ L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng: !tx [t/x] [s·ªë ti·ªÅn/all].', message.threadID);
        }

        if (!user) {
            return api.sendMessage('üö´ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa b·∫°n. H√£y s·ª≠ d·ª•ng l·ªánh !register ƒë·ªÉ th√™m v√†o h·ªá th·ªëng.', message.threadID);
        }

        if (user.money < betAmount) {
            return api.sendMessage('üö´ S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ c∆∞·ª£c.', message.threadID);
        }

        // L·∫Øc 3 x√≠ ng·∫ßu
        const dice1 = rollDice();
        const dice2 = rollDice();
        const dice3 = rollDice();
        const total = dice1 + dice2 + dice3;

        // X√°c ƒë·ªãnh k·∫øt qu·∫£ t√†i/x·ªâu
        const result = total > 10 ? 't' : 'x';
        const resultText = result.toUpperCase();

        let messageText = `üé≤: ${dice1}\nüé≤: ${dice2}\nüé≤: ${dice3}\n`;

        if (result === betChoice) {
            // Ng∆∞·ªùi d√πng th·∫Øng
            const winnings = Math.round(betAmount * 2 * 0.998); // G·∫•p 2 s·ªë ti·ªÅn c∆∞·ª£c v√† tr·ª´ 0.2% ph√≠, l√†m tr√≤n s·ªë
            user.money = Math.round(user.money + winnings); // C·ªông ti·ªÅn th·∫Øng v√†o balance v√† l√†m tr√≤n s·ªë
            messageText += `${resultText} - B·∫†N TH·∫ÆNG ${winnings.toLocaleString()} VND!`;
        } else {
            // Ng∆∞·ªùi d√πng thua
            user.money = Math.round(user.money - betAmount); // Tr·ª´ ti·ªÅn c∆∞·ª£c t·ª´ balance v√† l√†m tr√≤n s·ªë
            messageText += `${resultText} - B·∫†N THUA ${betAmount.toLocaleString()} VND.`;
        }

        // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o file
        fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));

        // G·ª≠i th√¥ng b√°o k·∫øt qu·∫£
        api.sendMessage(messageText, message.threadID);
    }
};
