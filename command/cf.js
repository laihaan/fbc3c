const fs = require('fs');
const path = require('path');

// ƒê∆∞·ªùng d·∫´n ƒë·∫øn file JSON ch·ª©a d·ªØ li·ªáu ng∆∞·ªùi d√πng
const dataFilePath = path.join(__dirname, '../data/data.json');

// H√†m chuy·ªÉn ƒë·ªïi ƒë·ªãnh d·∫°ng s·ªë ti·ªÅn v·ªõi k√Ω hi·ªáu
const parseBetAmount = (amount) => {
    const match = amount.match(/^(\d+)([kmb])$/i);
    if (match) {
        const value = parseFloat(match[1]);
        switch (match[2].toLowerCase()) {
            case 'k': return value * 1000;
            case 'm': return value * 1000000;
            case 'b': return value * 1000000000;
        }
    }
    return parseFloat(amount);
};

// H√†m th·ª±c thi l·ªánh cf (coinflip)
module.exports = {
    name: 'cf',
    execute: async (message, api) => {
        const uid = message.senderID;
        const args = message.body.split(' ').slice(1); // L·∫•y c√°c tham s·ªë t·ª´ l·ªánh

        // ƒê·ªçc d·ªØ li·ªáu t·ª´ file JSON
        const data = JSON.parse(fs.readFileSync(dataFilePath, 'utf8'));
        let user = data.find(user => user.senderID === uid);

        if (!user) {
            return api.sendMessage('üö´ Kh√¥ng t√¨m th·∫•y d·ªØ li·ªáu c·ªßa b·∫°n. H√£y s·ª≠ d·ª•ng l·ªánh !register ƒë·ªÉ th√™m v√†o h·ªá th·ªëng.', message.threadID);
        }

        // Ki·ªÉm tra ƒë·ªãnh d·∫°ng l·ªánh
        if (args.length !== 2) {
            return api.sendMessage('üö´ L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng: !cf [h/t] [s·ªë ti·ªÅn/all].', message.threadID);
        }

        const betChoice = args[0].toLowerCase();
        let betAmount = args[1].toLowerCase() === 'all' ? user.money : parseBetAmount(args[1]);

        // Gi·ªõi h·∫°n s·ªë ti·ªÅn c∆∞·ª£c t·ªëi ƒëa l√† 500,000
        if (betAmount > 500000) {
            betAmount = 500000;
        }

        // Chuy·ªÉn ƒë·ªïi l·ª±a ch·ªçn r√∫t g·ªçn th√†nh ƒë·∫ßy ƒë·ªß
        const choices = {
            'h': 'heads',
            't': 'tails'
        };
        const fullChoice = choices[betChoice];

        // Ki·ªÉm tra l·ª±a ch·ªçn c∆∞·ª£c v√† s·ªë ti·ªÅn c∆∞·ª£c
        if (!fullChoice || isNaN(betAmount) || betAmount <= 0) {
            return api.sendMessage('üö´ L·ªánh kh√¥ng h·ª£p l·ªá. Vui l√≤ng s·ª≠ d·ª•ng: !cf [h/t] [s·ªë ti·ªÅn/all].', message.threadID);
        }

        if (user.money < betAmount) {
            return api.sendMessage('üö´ S·ªë d∆∞ c·ªßa b·∫°n kh√¥ng ƒë·ªß ƒë·ªÉ c∆∞·ª£c.', message.threadID);
        }

        // Th·ª±c hi·ªán l·∫≠t ƒë·ªìng xu
        const result = Math.random() < 0.5 ? 'heads' : 'tails';

        if (result === fullChoice) {
            // Ng∆∞·ªùi d√πng th·∫Øng
            const winnings = betAmount * 2; // G·∫•p ƒë√¥i s·ªë ti·ªÅn c∆∞·ª£c
            user.money += winnings;
            api.sendMessage(`üéâ Ch√∫c m·ª´ng! B·∫°n ƒë√£ l·∫≠t ƒë·ªìng xu tr√∫ng ${result} v√† th·∫Øng ${winnings.toLocaleString()} VND.`, message.threadID);
        } else {
            // Ng∆∞·ªùi d√πng thua
            user.money -= betAmount;
            api.sendMessage(`üòû R·∫•t ti·∫øc! B·∫°n ƒë√£ l·∫≠t ƒë·ªìng xu tr√∫ng ${result} v√† thua ${betAmount.toLocaleString()} VND.`, message.threadID);
        }

        // C·∫≠p nh·∫≠t d·ªØ li·ªáu v√†o file
        fs.writeFileSync(dataFilePath, JSON.stringify(data, null, 2));
    }
};
